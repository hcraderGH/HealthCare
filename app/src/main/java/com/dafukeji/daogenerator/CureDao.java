package com.dafukeji.daogenerator;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.dafukeji.daogenerator.Cure;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CURE".
*/
public class CureDao extends AbstractDao<Cure, Long> {

    public static final String TABLENAME = "CURE";

    /**
     * Properties of entity Cure.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property StartTime = new Property(0, Long.class, "startTime", false, "START_TIME");
        public final static Property StopTime = new Property(1, Long.class, "stopTime", false, "STOP_TIME");
        public final static Property CureType = new Property(2, Integer.class, "cureType", false, "CURE_TYPE");
        public final static Property Id = new Property(3, Long.class, "id", true, "_id");
    };

    private DaoSession daoSession;


    public CureDao(DaoConfig config) {
        super(config);
    }
    
    public CureDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CURE\" (" + //
                "\"START_TIME\" INTEGER," + // 0: startTime
                "\"STOP_TIME\" INTEGER," + // 1: stopTime
                "\"CURE_TYPE\" INTEGER," + // 2: cureType
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT );"); // 3: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CURE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Cure entity) {
        stmt.clearBindings();
 
        Long startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(1, startTime);
        }
 
        Long stopTime = entity.getStopTime();
        if (stopTime != null) {
            stmt.bindLong(2, stopTime);
        }
 
        Integer cureType = entity.getCureType();
        if (cureType != null) {
            stmt.bindLong(3, cureType);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(4, id);
        }
    }

    @Override
    protected void attachEntity(Cure entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3);
    }    

    /** @inheritdoc */
    @Override
    public Cure readEntity(Cursor cursor, int offset) {
        Cure entity = new Cure( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // startTime
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // stopTime
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // cureType
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Cure entity, int offset) {
        entity.setStartTime(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStopTime(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCureType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Cure entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Cure entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
