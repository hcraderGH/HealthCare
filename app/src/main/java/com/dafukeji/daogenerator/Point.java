package com.dafukeji.daogenerator;

import com.dafukeji.daogenerator.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "POINT".
 */
public class Point {

    private Long currentTime;
    private Long id;
    private Float temperature;
    private Long cureId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PointDao myDao;

    private Cure cure;
    private Long cure__resolvedKey;


    public Point() {
    }

    public Point(Long id) {
        this.id = id;
    }

    public Point(Long currentTime, Long id, Float temperature, Long cureId) {
        this.currentTime = currentTime;
        this.id = id;
        this.temperature = temperature;
        this.cureId = cureId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPointDao() : null;
    }

    public Long getCurrentTime() {
        return currentTime;
    }

    public void setCurrentTime(Long currentTime) {
        this.currentTime = currentTime;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Float getTemperature() {
        return temperature;
    }

    public void setTemperature(Float temperature) {
        this.temperature = temperature;
    }

    public Long getCureId() {
        return cureId;
    }

    public void setCureId(Long cureId) {
        this.cureId = cureId;
    }

    /** To-one relationship, resolved on first access. */
    public Cure getCure() {
        Long __key = this.cureId;
        if (cure__resolvedKey == null || !cure__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CureDao targetDao = daoSession.getCureDao();
            Cure cureNew = targetDao.load(__key);
            synchronized (this) {
                cure = cureNew;
            	cure__resolvedKey = __key;
            }
        }
        return cure;
    }

    public void setCure(Cure cure) {
        synchronized (this) {
            this.cure = cure;
            cureId = cure == null ? null : cure.getId();
            cure__resolvedKey = cureId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
